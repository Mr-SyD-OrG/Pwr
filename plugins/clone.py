 # Don't Remove Credit Tg - @SyD_XyZ
# Ask Doubt on telegram @Syd_XyZ

# Clone Code Credit : YT - @SyD_Xyz / TG - @GetTGLinks / GitHub - @Bot_Cracker 

from info import API_ID, API_HASH, CLONE_MODE, LOG_CHANNEL, SYD_CHANNELS
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, CallbackQuery
from database.users_chats_db import db
from pyrogram.errors import UserNotParticipant
import re, os
from Script import script

async def not_subscribed(_, __, message):
    for channel in SYD_CHANNELS:
        try:
            user = await message._client.get_chat_member(channel, message.from_user.id)
            if user.status in {"kicked", "left"}:
                return True
        except UserNotParticipant:
            return True
    return False


@Client.on_message(filters.command('clone'))
async def clone_menu(client, message):
    if CLONE_MODE == False:
        return 

    if await db.is_clone_exist(message.from_user.id):
        return await message.reply("**Y·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ñ ü·¥è…¥·¥á·¥Ö ·¥Ä  ô·¥è·¥õ ·¥Ö·¥á ü·¥á·¥õ·¥á “ì…™ Äs·¥õ …™·¥õ  ô è /deleteclone \n\nW·¥á ' ü ü ·¥õ ú…™…¥·¥ã ·¥Ä ô·¥è·¥ú·¥õ …™·¥õ, ·¥õ·¥è ·¥ç·¥Ä·¥ã·¥á ·¥ç·¥è Ä·¥á ·¥õ ú·¥Ä…¥ ·¥è…¥·¥á  ô·¥è·¥õ, ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥úÍú±·¥á ·¥Ä…¥·¥è·¥õ ú·¥á Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ. \n\n F·¥è Ä Íú±·¥ú·¥©·¥©·¥è Ä·¥õ üå¥; @Bot_Cracker ‚ö°**")
    else:
        pass

    not_joined_channels = []
    for channel in SYD_CHANNELS:
        try:
            user = await client.get_chat_member(channel, message.from_user.id)
            if user.status in {"kicked", "left"}:
                not_joined_channels.append(channel)
        except UserNotParticipant:
            not_joined_channels.append(channel)
            
    if not_joined_channels:
        buttons = [
            [
                InlineKeyboardButton(
                    text=f"‚úß J·¥è…™…¥ {channel.capitalize()} ‚úß", url=f"https://t.me/{channel}"
                )
            ]
            for channel in not_joined_channels
        ]
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úß J·¥è…™…¥ Back-up ‚úß", url="https://t.me/+0Zi1FC4ulo8zYzVl"

                )
            ]
        )
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úî …™ ·¥Ä·¥ç ·¥ä·¥è…™…¥·¥á·¥Ö ‚úî", callback_data="check_subscription"
                )
            ]
        )

        text = "**S·¥è Ä Ä è,  è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥ä·¥è…™…¥ …™…¥ ·¥è·¥ú Ä  Ä·¥áq·¥ú…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±, ·¥© ü·¥á·¥ÄÍú±·¥á ·¥Ö·¥è Íú±·¥è ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á,,... ‚ö° .**"
        return await message.reply_text(text=text, reply_markup=InlineKeyboardMarkup(buttons))
        
    techvj = await client.ask(message.chat.id, "<b>1) S·¥á…¥·¥Ö <code>/newbot</code> ·¥õ·¥è @BotFather\n2) G…™·¥†·¥á ·¥Ä …¥·¥Ä·¥ç·¥á Íú∞·¥è Ä  è·¥è·¥ú Ä  ô·¥è·¥õ.\n3) G…™·¥†·¥á ·¥Ä ·¥ú…¥…™«´·¥ú·¥á ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á.\n4) T ú·¥á…¥  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥°…™·¥õ ú  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥.\n5) F·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥Ä·¥õ ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ç·¥á.\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.</b>")
    if techvj.text == '/cancel':
        await techvj.delete()
        return await message.reply('<b>C·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss üö´</b>')
    if techvj.forward_from and techvj.forward_from.id == 93372553:
        try:
            bot_token = re.findall(r"\b(\d+:[A-Za-z0-9_-]+)\b", techvj.text)[0]
        except:
            return await message.reply('<b>S·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢ üòï</b>')
    else:
        return await message.reply('<b>N·¥è·¥õ Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö Íú∞ Ä·¥è·¥ç @BotFather üòë</b>')
    user_id = message.from_user.id
    msg = await message.reply_text('<b><blockqoute>W·¥Ä…™·¥õ ·¥Ä ·¥ç…™…¥·¥ú·¥õ·¥á …™ ·¥Ä·¥ç ·¥Ñ Ä·¥á·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä  ô·¥è·¥õ,</blockqoute>\n \n<u>‚ö†Ô∏è…¥·¥è·¥õ·¥á:  ô è ·¥Ñ ü·¥è…¥…™…¥…¢  è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä·¥Ñ·¥Ñ·¥á·¥©·¥õ…™…¥…¢ ·¥õ·¥è ·¥è·¥ú Ä ·¥©·¥è ü…™·¥Ñ…™·¥áÍú±!</u></b>')
    try:
        vj = Client(
            f"{bot_token}", API_ID, API_HASH,
            bot_token=bot_token,
            plugins={"root": "MrSyDClone"}
        )
        await vj.start()
        bot = await vj.get_me()
        await db.add_clone_bot(bot.id, user_id, bot_token)
        await msg.edit_text(f"<b>S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü üY C ü·¥è…¥·¥á·¥Ö Y·¥è·¥ú Ä B·¥è·¥õ: @{bot.username}.\n\nY·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ·¥ús·¥õ·¥è·¥ç…™s·¥á  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ  ô è \n/settings ·¥Ä…¥·¥Ö /edit \nC·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ</b>\n\n<blockqoute>N·¥á·¥†·¥á Ä F·¥è Ä…¢·¥á·¥õ ·¥õ·¥è ·¥áx·¥©·¥á Ä…™·¥á…¥·¥Ñ·¥á ·¥õ ú·¥á Íú±·¥ú·¥©·¥á Ä ô Íú±·¥á Ä·¥†…™·¥Ñ·¥á·¥á ú‚ö°</blockqoute>")
    except BaseException as e:
        await msg.edit_text(f"‚ö†Ô∏è <b>B·¥è·¥õ E Ä Ä·¥è Ä:</b>\n\n<code>{e}</code>\n\n**T Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä ‚ö° ·¥è Ä K…™…¥·¥Ö ü è Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥õ·¥è @SyD_XyZ ·¥õ·¥è …¢·¥á·¥õ ·¥ÄÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥Ñ·¥á.**")
    await client.send_message(LOG_CHANNEL, script.LOG_BOT.format(message.from_user.id, message.from_user.mention, bot.username))
    

@Client.on_message(filters.command('deleteclone'))
async def delete_clone_menu(client, message):
    if await db.is_clone_exist(message.from_user.id):
        await db.delete_clone(message.from_user.id)
        await message.reply("**S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥Ä…¢·¥Ä…™…¥  ô è /clone**")
    else:
        await message.reply("**N·¥è ·¥Ñ ü·¥è…¥·¥á  ô·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö ‚úñ**")

async def restart_bots():
    bots_cursor = await db.get_all_bots()
    bots = await bots_cursor.to_list(None)
    for bot in bots:
        bot_token = bot['bot_token']
        try:
            vj = Client(
                f"{bot_token}", API_ID, API_HASH,
                bot_token=bot_token,
                plugins={"root": "MrSyDClone"},
            )
            await vj.start()
        except Exception as e:
            print(f"Error while restarting bot with token {bot_token}: {e}")
        
# Don't Remove Credit Tg - @SyD_XyZ
# Ask Doubt on telegram @Syd_XyZ



@Client.on_callback_query(filters.regex("check_subscription"))
async def check_subscription(client, callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    not_joined_channels = []

    for channel in SYD_CHANNELS:
        try:
            user = await client.get_chat_member(channel, user_id)
            if user.status in {"kicked", "left"}:
                not_joined_channels.append(channel)
        except UserNotParticipant:
            not_joined_channels.append(channel)

    if not not_joined_channels:
        await callback_query.message.edit_text(
            "**T ú·¥Ä…¥·¥ãÍú± ü©µ, Y·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ä·¥è…™…¥·¥á·¥Ö ·¥è…¥ ·¥Ä ü ü ·¥õ ú·¥á  Ä·¥áq·¥ú…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±. \nC ü…™·¥Ñ·¥ã ·¥è…¥ üòä /clone …¥·¥è·¥° ·¥õ·¥è Íú±·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á ·¥© Ä·¥è·¥Ñ·¥áÍú±Íú±.....‚ö°**"
        )
    else:
        buttons = [
            [
                InlineKeyboardButton(
                    text=f"‚úß J·¥è…™…¥ {channel.capitalize()} ‚úß",
                    url=f"https://t.me/{channel}",
                )
            ]
            for channel in not_joined_channels
        ]
        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úß J·¥è…™…¥ Back-up ‚úß", url="https://t.me/+0Zi1FC4ulo8zYzVl"

                )
            ]
        )

        buttons.append(
            [
                InlineKeyboardButton(
                    text="‚úî …™ ·¥Ä·¥ç ·¥ä·¥è…™…¥·¥á·¥Ö ‚úî", callback_data="check_subscription"
                )
            ]
        )

        text = "**S·¥õ…™ ü ü ü•≤,  è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥ä·¥è…™…¥ …™…¥ ·¥è·¥ú Ä ·¥Ä ü ü  Ä·¥áq·¥ú…™ Ä·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±, ·¥© ü·¥á·¥ÄÍú±·¥á ·¥Ö·¥è Íú±·¥è ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á,,... ‚ö° .**"
        await callback_query.message.edit_text(
            text=text, reply_markup=InlineKeyboardMarkup(buttons)
        )
